input {

file {
path => "/opt/kpi/storage/fcusage/*"
start_position => "beginning"
ignore_older => 0
type => "fcusage"
sincedb_path => "/dev/null"

}

file {
path => "/opt/kpi/storage/sanswusage/*"
start_position => "beginning"
ignore_older => 0
type => "sanswusage"
sincedb_path => "/dev/null"


}

file {
path => "/opt/kpi/storage/bwsvt/*"
start_position => "beginning"
ignore_older => 0
type => "bwsvt"
sincedb_path => "/dev/null"

}

file {
path => "/opt/kpi/storage/ssdusage/*"
start_position => "beginning"
ignore_older => 0
type => "ssdusage"
sincedb_path => "/dev/null"

}





file {
path => "/opt/kpi/storage/stgbwusage/*"
start_position => "beginning"
ignore_older => 0
type => "stgbwusage"
sincedb_path => "/dev/null"

}
file {
path => "/opt/kpi/storage/firmwaretracker/*"
start_position => "beginning"
ignore_older => 0
type => "firmware"
sincedb_path => "/dev/null"

}

file {
path => "/opt/kpi/storage/stgcapusage/*"
start_position => "beginning"
ignore_older => 0
type => "stgcapusage"
sincedb_path => "/dev/null"

}
}


filter {



if [type] == "firmware" {

  csv {
     separator => ","
    columns => ["DEVICE TYPE","TOTAL","BELOW MIN. CODE"]

  }


     mutate {convert =>  ["TOTAL", "float"] }
     mutate {convert =>  ["BELOW MIN. CODE", "float"] }


}


if [type] == "sanswusage" {

  csv {
     separator => ","

    columns => ["DC Location","IP","HostName","No of ports","Used Ports","Free Ports","% Used"]




  }


     mutate {convert =>  ["No of ports", "float"] }
     mutate {convert =>  ["Used Ports", "float"] }
     mutate {convert =>  ["Free Ports", "float"] }
     mutate {convert =>  ["% Used", "float"] }

}

if [type] == "ssdusage" {

  csv {
     separator => ","
    columns => ["Storage","SSD Used %"]
    
  } 
  
  
     mutate {convert =>  ["SSD Used %", "float"] }
  

}

if [type] == "bwsvt" {

  csv {
     separator => ","
    columns => ["KPI Check ","Storage","Hosts"]

  }


}





if [type] == "fcusage" {

  csv {
     separator => ","
    columns => ["Storage","FC Used %"]

  }


     mutate {convert =>  ["FC Used %", "float"] }


}


if [type] == "stgbwusage" {

  csv {
     separator => ","
    columns => ["Storage","Peak Bandwidth (GBps)"]
    
  } 
  
  
     mutate {convert =>  ["Peak Bandwidth (GBps)", "float"] }
  

}

if [type] == "stgcapusage" {

  csv {
     separator => ","
    columns => ["Location","Hostname","RAW","Usable","Used","Free","Used %","Type"]
    
  } 
  
  
     mutate {convert =>  ["RAW", "float"] }
     mutate {convert =>  ["Usable", "float"] }
     mutate {convert =>  ["Used", "float"] }
     mutate {convert =>  ["Free", "float"] }
     mutate {convert =>  ["Used %", "float"] }

}



}

output {


if [type] == "fcusage" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "fcusage"
  }
stdout {codec => rubydebug}
}

if [type] == "firmware" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "firmwaretracker"
  }
stdout {codec => rubydebug}
}


if [type] == "sanswusage" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "sanswusage"
  }
stdout {codec => rubydebug}
}

if [type] == "ssdusage" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]
     index => "ssdusage"

  }  
stdout {codec => rubydebug}
}

if [type] == "bwsvt" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]
     index => "bwsvt"

  }
stdout {codec => rubydebug}
}



if [type] == "stgbwusage" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "stgbwusage"
  }  
stdout {codec => rubydebug}
}
if [type] == "stgcapusage" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "stgcapusage"
  }  
stdout {codec => rubydebug}
}
}

